import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';


export default function generateEmoticonPermutations(emoticon) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$isFace = options.isFace,
      isFace = _options$isFace === undefined ? true : _options$isFace,
      _options$withNose = options.withNose,
      withNose = _options$withNose === undefined ? true : _options$withNose;

  var list = [emoticon];

  if (emoticon.toUpperCase() !== emoticon) {
    list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.toUpperCase(), options)));
  }

  if (isFace) {
    if (emoticon.indexOf('/') >= 0) {
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace('/', '\\'), options)));
    }

    if (emoticon.indexOf(')') >= 0) {
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace(')', ']'), options)));
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace(')', '}'), options)));
    }

    if (emoticon.indexOf('(') >= 0) {
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace('(', '['), options)));
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace('(', '{'), options)));
    }

    if (emoticon.indexOf(':') >= 0) {
      list.push.apply(list, _toConsumableArray(generateEmoticonPermutations(emoticon.replace(':', '='), options)));
    }

    if (withNose) {
      list.forEach(function (emo) {
        if (emo.indexOf('-') === -1) {
          list.push(emo.slice(0, emo.length - 1) + '-' + emo.slice(-1));
        }
      });
    }
  }

  list.sort(function (a, b) {
    return b.length - a.length;
  });

  return Array.from(new Set(list));
} /**
   * @copyright   2017, Miles Johnson
   * @license     https://opensource.org/licenses/MIT
   * 
   */