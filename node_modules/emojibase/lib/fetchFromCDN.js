'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

exports.default = fetchFromCDN;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fetchFromCDN(path) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if ("production" !== process.env.NODE_ENV) {
    if (!path || path.slice(-5) !== '.json') {
      throw new Error('A valid JSON dataset is required to fetch.');
    }

    if (!version) {
      throw new Error('A valid release version is required.');
    }
  }

  var _options$local = options.local,
      local = _options$local === undefined ? false : _options$local,
      opts = (0, _objectWithoutProperties3.default)(options, ['local']);

  var storage = local ? localStorage : sessionStorage;
  var cacheKey = 'emojibase/' + version + '/' + path;
  var cachedData = storage.getItem(cacheKey);

  if (cachedData) {
    return Promise.resolve(JSON.parse(cachedData));
  }

  return fetch('https://cdn.jsdelivr.net/npm/emojibase-data@' + version + '/' + path, (0, _extends3.default)({
    credentials: 'omit',
    mode: 'cors',
    redirect: 'error'
  }, opts)).then(function (response) {
    if (!response.ok) {
      throw new Error('Failed to load Emojibase dataset.');
    }

    return response.json();
  }).then(function (data) {
    try {
      storage.setItem(cacheKey, JSON.stringify(data));
    } catch (error) {}

    return data;
  });
} /**
   * @copyright   2017, Miles Johnson
   * @license     https://opensource.org/licenses/MIT
   * 
   */